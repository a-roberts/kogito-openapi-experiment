# Note that the mount path used to reference the input schema 
# must include the CR name
# it is not a mount path we set up, it is mounted in as a secret using the s2i Build CR
# s2i build does not let us provide our own volumes and mounts hence this approach
# Note also that this doesn't work despite the file being present and referenced ok using kogito 1.19 final
# you will see a horribly unhelpful NPE
# This would be awesome to work!
apiVersion: my.api.com/v1beta1
kind: AdamKogitoExample
metadata:
  name: my-inline-kogito-example
spec:
  # Note that in this case the data input schema is here as a reference (input-schema)
  # and it will be mounted into a secret to be used in the Kogito build (through s2i)
  # This gives a NPE unfortunately also even though it is there
  kogito:
    input-schema: |-
      "$schema": "http://json-schema.org/draft-04/schema#",
        "title": "Expression",
        "description": "Schema for expression test",
        "type": "object",
        "properties": {
          "numbers": {
            "description": "The array of numbers to be operated with",
            "type": "array",
            "items" : {
                "type" : "object",
                "properties" : {
                  "x" : {"type":"number"},
                  "y" : {"type":"number"}
                }
            }
          }
        },
        "required": ["numbers"]
    workflow: |-
      {
        "id": "expression",
        "version": "1.0",
        "name": "Workflow Expression example",
        "constants" : {
          "Dog" : {
            "castellano" : "perro",
            "leones": "perru",
            "gallego" : "can",
            "aragones" : "cocho",
            "catalan" : "gos",
            "vasco": "txakurra"
          }
        },
        "dataInputSchema" : "/var/run/secrets/openshift.io/build/my-file-example-build-core-workflow/input-schema.json",
        "states": [
          {
            "name": "squareState",
            "type": "operation",
            "actions": [
              {
                "name": "maxAction",
                "functionRef": {
                  "refName": "max"
                },
                "actionDataFilter": {
                  "results" : ".max.x", 
                  "toStateData" : ".number"
                }
              }
            ],
            "transition": "finish"
          },
          {
            "name": "finish",
            "type": "operation",
            "stateDataFilter": {
              "input": "{result: .number}"
            },
            "actions": [
              {
                "name": "printAction",
                "functionRef": {
                  "refName": "printMessage",
                  "arguments": {
                    "message": ".result"
                  }
                }
              }
            ],
            "end": {
              "terminate": "true"
            }
          }
        ]
      }
